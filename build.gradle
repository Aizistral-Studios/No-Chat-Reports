import org.apache.tools.ant.taskdefs.condition.Os

plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id "com.matthewprenger.cursegradle" version "1.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

apply from: 'common.gradle'

def createLink(source, target) {
	if (new File(target).exists()) {
		println("Target ${target} already exists, skipping symbolic link creation")
		return
	}
	
	try {
		exec {
			source = new File(projectDir, source).getCanonicalPath()
			target = new File(projectDir, target).getCanonicalPath()
			new File(target).getParentFile().mkdirs()
			
			if (Os.isFamily(Os.FAMILY_WINDOWS)) {
				println("Creating link from ${source} to ${target} (Windows)")
				commandLine "cmd", "/c", "mklink /J \"${target}\" \"${source}\""
			} else if (Os.isFamily(Os.FAMILY_UNIX)) {
				println("Creating link from ${source} to ${target} (Unix)")
				commandLine "sh", "-c", "ln -s \"${source}\" \"${target}\""
			}
		}
	} catch(Exception e){
		println("Exception: $e")
	}
}

def setupLinks() {
	println("Setting up symbolic links...")
	createLink("./src/main/java/com/aizistral/nochatreports/common", "./forge/src/main/java/com/aizistral/nochatreports/common")
	createLink("./src/main/resources/assets", "./forge/src/main/resources/assets")
	createLink("./src/main/resources/mixins/common", "./forge/src/main/resources/mixins/common")
	
	if (!new File("./forge/src/main/java/com/aizistral/nochatreports/common/platform/PlatformProvider.java").exists()) {
		throw new IllegalStateException("No PlatformProvider found :/")
	}
}

setupLinks()

loom {
	accessWidenerPath = file("src/main/resources/nochatreports.accesswidener")

	mixin {
		add(sourceSets.main, "nochatreports.refmap.json")
	}
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url 'https://jitpack.io' }
	maven { url "file:///${project.projectDir}/deps/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.terraformersmc:modmenu:${project.mod_menu_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	include(fabricApi.module("fabric-api-base", project.fabric_version))
	modImplementation include(fabricApi.module("fabric-networking-api-v1", project.fabric_version))
	modImplementation include(fabricApi.module("fabric-screen-api-v1", project.fabric_version))
	modImplementation include(fabricApi.module("fabric-rendering-v1", project.fabric_version))
	modImplementation include(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))
}

sourceSets.remove(sourceSets.test)

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand 'mod_license': mod_license, 
		'version': version, 
		'mod_id' : mod_id, 
		'mod_name': mod_name, 
		'mod_url': mod_url, 
		'mod_author': mod_author, 
		'mod_icon': mod_icon, 
		'mod_description': mod_description,
		'issue_tracker_url': issue_tracker_url,
		'contributor_0': contributor_0
	}

    from("${rootProject.projectDir}/docs") {
        include 'CHANGELOG.md'
    }
	
	from("${rootProject.projectDir}") {
        include 'LICENSE'
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// withSourcesJar()
}

//task testJar (type: Jar) {
//	classifier = 'test'
//	from sourceSets.test.output
//	testJar.finalizedBy('prepareRemapJar')
//	testJar.finalizedBy('remapJar')
//
//	from("LICENSE") {
//		// NO-OP
//	}
//	
//	doFirst {
//		remapJar.classifier = 'test-reobf'
//		remapJar.inputFile = testJar.outputs.files.singleFile
//	}
//}

curseforge {

    project {
		println("Pushing CurseGradle specifications for project ID: ${curse_id}")	
	
		// Specified as cmd argument
        apiKey = findProperty('curseKey') ?: 'none'
        
		id = "${curse_id}"
        releaseType = "${version_type}"
        changelogType = 'markdown'
        changelog = file('docs/CHANGELOG.md')
		mainArtifact(remapJar)
		
		addGameVersion "1.20.1"
		addGameVersion "1.20"
		addGameVersion 'Quilt'
		addGameVersion 'Fabric'
		addGameVersion 'Java 17'
		
		relations {
			embeddedLibrary 'fabric-api'
			optionalDependency 'modmenu'
			optionalDependency 'cloth-config'
		}
		
		afterEvaluate {
			uploadTask.dependsOn(remapJar)
		}
		
		//debug = true
        //addArtifact(sourcesJar)
        //addArtifact(apiJar)
    }
	
	options {
		forgeGradleIntegration = false
	}
}

modrinth {
    token = findProperty('modrinthKey') ?: 'none'
    projectId = "no-chat-reports"
    versionNumber = "Fabric-" + project.mod_version
	versionName = "No Chat Reports Fabric-" + project.mod_version
    versionType = "${version_type}"
	changelog = rootProject.file("docs/CHANGELOG.md").text
    uploadFile = remapJar
    gameVersions = [ "1.20.1", "1.20" ]
	loaders = ['fabric', 'quilt']
	
	dependencies {
		// The scope can be `required`, `optional`, or `incompatible`
		embedded.project "fabric-api"
		optional.project "modmenu"
		optional.project "cloth-config"
    }
	
	syncBodyFrom = rootProject.file("docs/README.md").text
}

tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

afterEvaluate {
	upload.dependsOn(remapJar)
}

task upload {
	dependsOn('modrinth')
	dependsOn('curseforge')
}
